import { createReducer, createActions } from 'reduxsauce'
import Immutable from 'seamless-immutable'
<%_ if (context.pagination !== 'no') { _%>
import { loadMoreDataWhenScrolled } from '../../../shared/util/pagination-utils'
import { parseHeaderForLinks } from '../../../shared/util/url-utils'
<%_ } _%>

/* ------------- Types and Action Creators ------------- */

const { Types, Creators } = createActions({
  <%= context.entityInstance %>Request: ['<%= context.entityInstance %>Id'],
  <%= context.entityInstance %>AllRequest: ['options'],
  <%= context.entityInstance %>UpdateRequest: ['<%= context.entityInstance %>'],
  <%_ if (context.searchEngine) { _%>
  <%= context.entityInstance %>SearchRequest: ['query'],
  <%_ } _%>
  <%= context.entityInstance %>DeleteRequest: ['<%= context.entityInstance %>Id'],

  <%= context.entityInstance %>Success: ['<%= context.entityInstance %>'],
  <%= context.entityInstance %>AllSuccess: ['<%= context.entityInstance %>List', 'headers'],
  <%= context.entityInstance %>UpdateSuccess: ['<%= context.entityInstance %>'],
  <%_ if (context.searchEngine) { _%>
  <%= context.entityInstance %>SearchSuccess: ['<%= context.entityInstance %>List'],
  <%_ } _%>
  <%= context.entityInstance %>DeleteSuccess: [],

  <%= context.entityInstance %>Failure: ['error'],
  <%= context.entityInstance %>AllFailure: ['error'],
  <%= context.entityInstance %>UpdateFailure: ['error'],
  <%_ if (context.searchEngine) { _%>
  <%= context.entityInstance %>SearchFailure: ['error'],
  <%_ } _%>
  <%= context.entityInstance %>DeleteFailure: ['error'],

  <%= context.entityInstance %>Reset: []
})

export const <%= context.entityNameCapitalized %>Types = Types
export default Creators

/* ------------- Initial State ------------- */

export const INITIAL_STATE = Immutable({
  fetchingOne: false,
  fetchingAll: false,
  updating: false,
  <%_ if (context.searchEngine) { _%>
  searching: false,
  <%_ } _%>
  deleting: false,
  updateSuccess: false,
  <%= context.entityInstance %>: {id: undefined},
  <%= context.entityInstance %>List: [],
  errorOne: null,
  errorAll: null,
  errorUpdating: null,
  <%_ if (context.searchEngine) { _%>
  errorSearching: null,
  <%_ } _%>
  errorDeleting: null,
  <%_ if (context.pagination !== 'no') { _%>
  links: { next: 0 },
  totalItems: 0,
  <%_ } _%>
})

/* ------------- Reducers ------------- */

// request the data from an api
export const request = (state) =>
  state.merge({
    fetchingOne: true,
    errorOne: false,
    <%= context.entityInstance %>: INITIAL_STATE.<%= context.entityInstance %>
  })

// request the data from an api
export const allRequest = (state) =>
  state.merge({
    fetchingAll: true,
    errorAll: false,
  })

// request to update from an api
export const updateRequest = (state) =>
  state.merge({
    updateSuccess: false,
    updating: true
  })
<%_ if (context.searchEngine) { _%>
// request to search from an api
export const searchRequest = (state) =>
  state.merge({
    searching: true
  })
<%_ } _%>
// request to delete from an api
export const deleteRequest = (state) =>
  state.merge({
    deleting: true
  })

// successful api lookup for single entity
export const success = (state, action) => {
  const { <%= context.entityInstance %> } = action
  return state.merge({
    fetchingOne: false,
    errorOne: null,
    <%= context.entityInstance %>
  })
}
// successful api lookup for all entities
export const allSuccess = (state, action) => {
  const { <%= context.entityInstance %>List<%_ if (context.pagination !== 'no') { _%>, headers<%_ } _%> } = action
  <%_ if (context.pagination !== 'no') { _%>
  const links = parseHeaderForLinks(headers.link)
  <%_ } _%>
  return state.merge({
    fetchingAll: false,
    errorAll: null,
    <%_ if (context.pagination !== 'no') { _%>
    links,
    totalItems: parseInt(headers['x-total-count'], 10),
    <%= context.entityInstance %>List: loadMoreDataWhenScrolled(state.<%= context.entityInstance %>List, <%= context.entityInstance %>List, links),
    <%_ } else { _%>
    <%= context.entityInstance %>List
    <%_ } _%>
  })
}
// successful api update
export const updateSuccess = (state, action) => {
  const { <%= context.entityInstance %> } = action
  return state.merge({
    updateSuccess: true,
    updating: false,
    errorUpdating: null,
    <%= context.entityInstance %>
  })
}
<%_ if (context.searchEngine) { _%>
// successful api search
export const searchSuccess = (state, action) => {
  const { <%= context.entityInstance %>List } = action
  return state.merge({
    searching: false,
    errorSearching: null,
    <%= context.entityInstance %>List
  })
}
<%_ } _%>
// successful api delete
export const deleteSuccess = (state) => {
  return state.merge({
    deleting: false,
    errorDeleting: null,
    <%= context.entityInstance %>: INITIAL_STATE.<%= context.entityInstance %>
  })
}

// Something went wrong fetching a single entity.
export const failure = (state, action) => {
  const { error } = action
  return state.merge({
    fetchingOne: false,
    errorOne: error,
    <%= context.entityInstance %>: INITIAL_STATE.<%= context.entityInstance %>
  })
}
// Something went wrong fetching all entities.
export const allFailure = (state, action) => {
  const { error } = action
  return state.merge({
    fetchingAll: false,
    errorAll: error,
    <%= context.entityInstance %>List: []
  })
}
// Something went wrong updating.
export const updateFailure = (state, action) => {
  const { error } = action
  return state.merge({
    updateSuccess: false,
    updating: false,
    errorUpdating: error,
    <%= context.entityInstance %>: state.<%= context.entityInstance %>
  })
}
// Something went wrong deleting.
export const deleteFailure = (state, action) => {
  const { error } = action
  return state.merge({
    deleting: false,
    errorDeleting: error,
    <%= context.entityInstance %>: state.<%= context.entityInstance %>
  })
}
<%_ if (context.searchEngine) { _%>
// Something went wrong searching the entities.
export const searchFailure = (state, action) => {
  const { error } = action
  return state.merge({
    searching: false,
    errorSearching: error,
    <%= context.entityInstance %>List: []
  })
}
<%_ } _%>

export const reset = (state) => INITIAL_STATE

/* ------------- Hookup Reducers To Types ------------- */

export const reducer = createReducer(INITIAL_STATE, {
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_REQUEST]: request,
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_ALL_REQUEST]: allRequest,
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_UPDATE_REQUEST]: updateRequest,
  <%_ if (context.searchEngine) { _%>
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_SEARCH_REQUEST]: searchRequest,
  <%_ } _%>
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_DELETE_REQUEST]: deleteRequest,

  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_SUCCESS]: success,
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_ALL_SUCCESS]: allSuccess,
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_UPDATE_SUCCESS]: updateSuccess,
  <%_ if (context.searchEngine) { _%>
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_SEARCH_SUCCESS]: searchSuccess,
  <%_ } _%>
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_DELETE_SUCCESS]: deleteSuccess,

  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_FAILURE]: failure,
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_ALL_FAILURE]: allFailure,
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_UPDATE_FAILURE]: updateFailure,
  <%_ if (context.searchEngine) { _%>
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_SEARCH_FAILURE]: searchFailure,
  <%_ } _%>
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_DELETE_FAILURE]: deleteFailure,
  [Types.<%= context.entityNameSnakeCase.toUpperCase() %>_RESET]: reset
})
