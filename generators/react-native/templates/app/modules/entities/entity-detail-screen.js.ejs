import React from 'react'
import { ActivityIndicator, ScrollView, Text, <% if (context.fieldsContainImageBlob) { %>Image, <% } %>View } from 'react-native';
import { connect } from 'react-redux'
import { useFocusEffect } from '@react-navigation/native';
<%_ if (context.fieldsContainLocalDate) { _%>
import { convertLocalDateToString } from '../../../shared/util/date-transforms'
<%_ } _%>

import <%= context.entityNameCapitalized %>Actions from './<%= context.entityFileName %>.reducer'
import RoundedButton from '../../../shared/components/rounded-button/rounded-button'
import <%= context.entityNameCapitalized %>DeleteModal from './<%= context.entityFileName %>-delete-modal';
import styles from './<%= context.entityFileName %>-styles'

function <%= context.entityNameCapitalized %>DetailScreen(props) {
  const { route, get<%= context.entityNameCapitalized %>, navigation, <%= context.entityInstance %>, fetching, error } = props;
  const [deleteModalVisible, setDeleteModalVisible] = React.useState(false);
  // prevents display of stale reducer data
  const entityId = <%= context.entityInstance %>?.id ?? null;
  const routeEntityId = route.params?.entityId ?? null;
  const correctEntityLoaded = routeEntityId && entityId && routeEntityId.toString() === entityId.toString();

  useFocusEffect(
    React.useCallback(() => {
      if (!routeEntityId) {
        navigation.navigate('<%= context.entityNameCapitalized %>');
      } else {
        setDeleteModalVisible(false);
        get<%= context.entityNameCapitalized %>(routeEntityId);
      }
    }, [routeEntityId, get<%= context.entityNameCapitalized %>, navigation]),
  );

  if (!entityId && !fetching && error) {
    return (
      <View style={styles.loading}>
        <Text>Something went wrong fetching the <%= context.entityNameCapitalized %>.</Text>
      </View>
    );
  }
  if (!entityId || fetching || !correctEntityLoaded) {
    return (
      <View style={styles.loading}>
        <ActivityIndicator size="large" />
      </View>
    );
  }
  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.paddedScrollView} testID="<%= context.entityInstance %>DetailScrollView">
      <Text style={styles.label}>Id:</Text>
      <Text>{<%= context.entityInstance %>.id}</Text>
      <%_ context.fields.filter(field => !field.id).forEach(function (field) { _%>
      {/* <%= field.fieldNameCapitalized %> Field */}
      <Text style={styles.label}><%= field.fieldNameCapitalized %>:</Text>
      <%_ if (field.fieldType === 'LocalDate') { _%>
        <Text testID='<%= field.fieldName %>'>{convertLocalDateToString(<%= context.entityInstance %>.<%= field.fieldName %>)}</Text>
      <%_ } else if (field.fieldType === 'ZonedDateTime' || field.fieldType === 'Instant' || field.fieldType === 'Boolean') { _%>
        <Text testID='<%= field.fieldName %>'>{String(<%= context.entityInstance %>.<%= field.fieldName %>)}</Text>
      <%_ } else if (field.fieldType === 'byte[]' && field.fieldTypeBlobContent === 'any') { _%>
        <Text testID='<%= field.fieldName %>'>Open {<%= context.entityInstance %>.<%= field.fieldName %>ContentType} (not implemented)</Text>
      <%_ } else if (field.fieldType === 'byte[]' && field.fieldTypeBlobContent === 'image') { _%>
        <Text testID='<%= field.fieldName %>ContentType'>{<%= context.entityInstance %>.<%= field.fieldName %>ContentType}</Text>
        <Image
          testID="<%= field.fieldName %>"
          style={styles.imageBlob}
          source={{ uri: `data:${<%= context.entityInstance %>.<%= field.fieldName %>ContentType};base64,${<%= context.entityInstance %>.<%= field.fieldName %>}` }}
        />
      <%_ } else { _%>
        <Text testID='<%= field.fieldName %>'>{<%= context.entityInstance %>.<%= field.fieldName %>}</Text>
      <%_ } _%>
      <%_ }) _%>
      <%_ context.relationships.filter(relation => relation.ownerSide).forEach(function (relation) { _%>
        <Text style={styles.label}><%= relation.relationshipNameHumanized %>:</Text>
        <%_ if (relation.relationshipType === 'many-to-many') { _%>
        {<%= context.entityInstance %>.<%= relation.relationshipNamePlural %> && <%= context.entityInstance %>.<%= relation.relationshipNamePlural %>.map((entity, index) => (
          <Text key={index} testID={`<%= relation.relationshipNamePlural %>-${index}`}>{String(entity.<%= relation.otherEntityField %> || '')}</Text>
        ))}
        <%_ } else { _%>
        <Text testID='<%= relation.relationshipName %>'>{String(<%= context.entityInstance %>.<%= relation.relationshipName %> ? <%= context.entityInstance %>.<%= relation.relationshipName %>.<%= relation.otherEntityField %> : '')}</Text>
        <%_ } _%>
      <%_ }) _%>

      <View style={styles.entityButtons}>
        <RoundedButton
          text="Edit"
          onPress={() => navigation.navigate('<%= context.entityNameCapitalized %>Edit', { entityId })}
          accessibilityLabel={'<%= context.entityNameCapitalized %> Edit Button'}
          testID="<%= context.entityInstance %>EditButton"
        />
        <RoundedButton
          text="Delete"
          onPress={() => setDeleteModalVisible(true)}
          accessibilityLabel={'<%= context.entityNameCapitalized %> Delete Button'}
          testID="<%= context.entityInstance %>DeleteButton"
        />
        {deleteModalVisible && (
          <<%= context.entityNameCapitalized %>DeleteModal
            navigation={navigation}
            visible={deleteModalVisible}
            setVisible={setDeleteModalVisible}
            entity={<%= context.entityInstance %>}
            testID="<%= context.entityInstance %>DeleteModal"
          />
        )}
      </View>
    </ScrollView>
  );
}

const mapStateToProps = (state) => {
  return {
    <%= context.entityInstance %>: state.<%= context.entityInstancePlural %>.<%= context.entityInstance %>,
    error: state.<%= context.entityInstancePlural %>.errorOne,
    fetching: state.<%= context.entityInstancePlural %>.fetchingOne,
    deleting: state.<%= context.entityInstancePlural %>.deleting,
    errorDeleting: state.<%= context.entityInstancePlural %>.errorDeleting
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    get<%= context.entityNameCapitalized %>: (id) => dispatch(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>Request(id)),
    getAll<%= context.entityNamePlural %>: (options) => dispatch(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>AllRequest(options)),
    delete<%= context.entityNameCapitalized %>: (id) => dispatch(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>DeleteRequest(id)),
    reset<%= context.entityNamePlural %>: () => dispatch(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>Reset()),
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(<%= context.entityNameCapitalized %>DetailScreen)
