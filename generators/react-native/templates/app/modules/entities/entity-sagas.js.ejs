import { call, put } from 'redux-saga/effects'
import { callApi } from '../../../shared/sagas/call-api.saga'
import <%= context.entityNameCapitalized %>Actions from './<%= context.entityFileName %>.reducer'
<%_ if (context.fieldsContainDate) { _%>
import {
  <%_ if (context.fieldsContainZonedDateTime || context.fieldsContainInstant) { _%>
  convertDateTimeFromServer,
  <%_ } _%>
  <%_ if (context.fieldsContainLocalDate) { _%>
  convertLocalDateFromServer,
  <%_ } _%>
} from '../../../shared/util/date-transforms'
<%_ } _%>

function * get<%= context.entityNameCapitalized %> (api, action) {
  const { <%= context.entityInstance %>Id } = action
  // make the call to the api
  const apiCall = call(api.get<%= context.entityNameCapitalized %>, <%= context.entityInstance %>Id)
  const response = yield call(callApi, apiCall)

  // success?
  if (response.ok) {
    <%_ if (context.fieldsContainDate) { _%>
    response.data = mapDateFields(response.data)
    <%_ } _%>
    yield put(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>Success(response.data))
  } else {
    yield put(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>Failure(response.data))
  }
}

function * getAll<%= context.entityNamePlural %> (api, action) {
  const { options } = action
  // make the call to the api
  const apiCall = call(api.getAll<%= context.entityNamePlural %>, options)
  const response = yield call(callApi, apiCall)

  // success?
  if (response.ok) {
    yield put(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>AllSuccess(response.data, response.headers))
  } else {
    yield put(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>AllFailure(response.data))
  }
}

function * update<%= context.entityNameCapitalized %> (api, action) {
  const { <%= context.entityInstance %> } = action
  // make the call to the api
  const idIsNotNull = !(<%= context.entityInstance %>.id === null || <%= context.entityInstance %>.id === undefined);
  const apiCall = call(idIsNotNull ? api.update<%= context.entityNameCapitalized %> : api.create<%= context.entityNameCapitalized %>, <%= context.entityInstance %>)
  const response = yield call(callApi, apiCall)

  // success?
  if (response.ok) {
    <%_ if (context.fieldsContainDate) { _%>
    response.data = mapDateFields(response.data)
    <%_ } _%>
    yield put(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>UpdateSuccess(response.data))
  } else {
    yield put(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>UpdateFailure(response.data))
  }
}

<%_ if (context.searchEngine) { _%>
function * search<%= context.entityNamePlural %> (api, action) {
  const { query } = action
  // make the call to the api
  const apiCall = call(api.search<%= context.entityNamePlural %>, query)
  const response = yield call(callApi, apiCall)

  // success?
  if (response.ok) {
    yield put(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>SearchSuccess(response.data))
  } else {
    yield put(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>SearchFailure(response.data))
  }
}
<%_ } _%>
function * delete<%= context.entityNameCapitalized %> (api, action) {
  const { <%= context.entityInstance %>Id } = action
  // make the call to the api
  const apiCall = call(api.delete<%= context.entityNameCapitalized %>, <%= context.entityInstance %>Id)
  const response = yield call(callApi, apiCall)

  // success?
  if (response.ok) {
    yield put(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>DeleteSuccess())
  } else {
    yield put(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>DeleteFailure(response.data))
  }
}
<%_ if (context.fieldsContainDate) { _%>
function mapDateFields (data) {
<%_ context.fields.filter(field => !field.id).forEach(function (field) { _%>
<%_ if (field.fieldType === 'LocalDate') { _%>
  data.<%= field.fieldName %> = convertLocalDateFromServer(data.<%= field.fieldName %>)
<%_ } else if (field.fieldType === 'ZonedDateTime' || field.fieldType === 'Instant') { _%>
  data.<%= field.fieldName %> = convertDateTimeFromServer(data.<%= field.fieldName %>)
<%_ } _%>
<%_ }) _%>
  return data
}
<%_ } _%>

export default {
  getAll<%= context.entityNamePlural %>,
  get<%= context.entityNameCapitalized %>,
  delete<%= context.entityNameCapitalized %>,
  <%_ if (context.searchEngine) { _%>
  search<%= context.entityNamePlural %>,
  <%_ } _%>
  update<%= context.entityNameCapitalized %>,
};

