import Actions, { reducer, INITIAL_STATE } from '../../../../../app/modules/entities/<%= context.entityFileName %>/<%= context.entityFileName %>.reducer'

test('attempt retrieving a single <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>Request({ id: 1 }))

  expect(state.fetchingOne).toBe(true)
  expect(state.<%= context.entityInstance %>).toEqual({ id: undefined })
})

test('attempt retrieving a list of <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>AllRequest({ id: 1 }))

  expect(state.fetchingAll).toBe(true)
  expect(state.<%= context.entityInstance %>List).toEqual([])
})

test('attempt updating a <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>UpdateRequest({ id: 1 }))

  expect(state.updating).toBe(true)
})
<%_ if (context.searchEngine) { _%>
test('attempt searching a <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>SearchRequest(1))

  expect(state.searching).toBe(true)
})
<%_ } _%>
test('attempt to deleting a <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>DeleteRequest({ id: 1 }))

  expect(state.deleting).toBe(true)
})

test('success retrieving a <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>Success({ id: 1 }))

  expect(state.fetchingOne).toBe(false)
  expect(state.errorOne).toBe(null)
  expect(state.<%= context.entityInstance %>).toEqual({ id: 1 })
})

test('success retrieving a list of <%= context.entityInstance %>', () => {
  const state = reducer(
    INITIAL_STATE,
    <%_ if (context.pagination === 'no') { _%>
    Actions.<%= context.entityInstance %>AllSuccess([{ id: 1 }, { id: 2 }]),
    <%_ } else { _%>
    Actions.<%= context.entityInstance %>AllSuccess([{ id: 1 }, { id: 2 }], { link: '</?page=1>; rel="last",</?page=0>; rel="first"', 'x-total-count': 5}),
    <%_ } _%>
  )

  expect(state.fetchingAll).toBe(false)
  expect(state.errorAll).toBe(null)
  expect(state.<%= context.entityInstance %>List).toEqual([{ id: 1 }, { id: 2 }])
  <%_ if (context.pagination !== 'no') { _%>
  expect(state.links).toEqual({ first: 0, last: 1 })
  expect(state.totalItems).toEqual(5)
  <%_ } _%>
})

test('success updating a <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>UpdateSuccess({ id: 1 }))

  expect(state.updating).toBe(false)
  expect(state.errorUpdating).toBe(null)
  expect(state.<%= context.entityInstance %>).toEqual({ id: 1 })
})
<%_ if (context.searchEngine) { _%>
test('success searching a <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>SearchSuccess({ id: 1 }))

  expect(state.searching).toBe(false)
  expect(state.errorSearching).toBe(null)
  expect(state.<%= context.entityInstance %>List).toEqual({ id: 1 })
})
<%_ } _%>
test('success deleting a <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>DeleteSuccess())

  expect(state.deleting).toBe(false)
  expect(state.errorDeleting).toBe(null)
  expect(state.<%= context.entityInstance %>).toEqual({ id: undefined })
})

test('failure retrieving a <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>Failure({ error: 'Not found' }))

  expect(state.fetchingOne).toBe(false)
  expect(state.errorOne).toEqual({ error: 'Not found' })
  expect(state.<%= context.entityInstance %>).toEqual({ id: undefined })
})

test('failure retrieving a list of <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>AllFailure({ error: 'Not found' }))

  expect(state.fetchingAll).toBe(false)
  expect(state.errorAll).toEqual({ error: 'Not found' })
  expect(state.<%= context.entityInstance %>List).toEqual([])
})

test('failure updating a <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>UpdateFailure({ error: 'Not found' }))

  expect(state.updating).toBe(false)
  expect(state.errorUpdating).toEqual({ error: 'Not found' })
  expect(state.<%= context.entityInstance %>).toEqual(INITIAL_STATE.<%= context.entityInstance %>)
})
<%_ if (context.searchEngine) { _%>
test('failure searching a <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>SearchFailure({ error: 'Not found' }))

  expect(state.searching).toBe(false)
  expect(state.errorSearching).toEqual({ error: 'Not found' })
  expect(state.<%= context.entityInstance %>List).toEqual([])
})
<%_ } _%>
test('failure deleting a <%= context.entityInstance %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= context.entityInstance %>DeleteFailure({ error: 'Not found' }))

  expect(state.deleting).toBe(false)
  expect(state.errorDeleting).toEqual({ error: 'Not found' })
  expect(state.<%= context.entityInstance %>).toEqual(INITIAL_STATE.<%= context.entityInstance %>)
})

test('resetting state for <%= context.entityInstance %>', () => {
  const state = reducer({ ...INITIAL_STATE, deleting: true }, Actions.<%= context.entityInstance %>Reset())
  expect(state).toEqual(INITIAL_STATE)
})
