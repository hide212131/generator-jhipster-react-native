import React from 'react';
import { TouchableHighlight, Modal, Text, View } from 'react-native';
import { connect } from 'react-redux';

import <%= entity.entityNameCapitalized %>Actions from './<%= entity.entityFileName %>.reducer';

import styles from './<%= entity.entityFileName %>-styles'

function <%= entity.entityNameCapitalized %>DeleteModal(props) {
    const { visible, setVisible, entity, navigation, testID } = props;

    const deleteEntity = () => {
        props.delete<%= entity.entityNameCapitalized %>(entity.id);
        navigation.canGoBack() ? navigation.goBack() : navigation.navigate('<%= entity.entityNameCapitalized %>');
    };
    return (
        <Modal animationType="slide" transparent={true} visible={visible}>
            <View testID={testID} style={styles.centeredView}>
                <View style={styles.modalView}>
                    <View style={[styles.flex, styles.flexRow]}>
                        <Text style={styles.modalText}>Delete <%= entity.entityNameCapitalized %> {entity.id}?</Text>
                    </View>
                    <View style={[styles.flexRow]}>
                        <TouchableHighlight
                            style={[styles.openButton, styles.cancelButton]}
                            onPress={() => {
                                setVisible(false);
                            }}>
                            <Text style={styles.textStyle}>Cancel</Text>
                        </TouchableHighlight>
                        <TouchableHighlight style={[styles.openButton, styles.submitButton]} onPress={deleteEntity} testID="deleteButton">
                            <Text style={styles.textStyle}>Delete</Text>
                        </TouchableHighlight>
                    </View>
                </View>
            </View>
        </Modal>
    );
}

const mapStateToProps = (state) => {
    return {
        <%= entity.entityInstance %>: state.<%= entity.entityInstancePlural %>.<%= entity.entityInstance %>,
        fetching: state.<%= entity.entityInstancePlural %>.fetchingOne,
        deleting: state.<%= entity.entityInstancePlural %>.deleting,
        errorDeleting: state.<%= entity.entityInstancePlural %>.errorDeleting,
    };
};

const mapDispatchToProps = (dispatch) => {
    return {
        get<%= entity.entityNameCapitalized %>: (id) => dispatch(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>Request(id)),
        getAll<%= entity.entityNamePlural %>: (options) => dispatch(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>AllRequest(options)),
        delete<%= entity.entityNameCapitalized %>: (id) => dispatch(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>DeleteRequest(id)),
        reset<%= entity.entityNamePlural %>: () => dispatch(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>Reset()),
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(<%= entity.entityNameCapitalized %>DeleteModal);
