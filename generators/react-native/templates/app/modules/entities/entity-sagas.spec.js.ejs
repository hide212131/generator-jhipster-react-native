import { put } from 'redux-saga/effects'

import FixtureAPI from '../../../../../app/shared/services/fixture-api'
import <%= entity.entityNameCapitalized %>Sagas from '../../../../../app/modules/entities/<%= entity.entityFileName %>/<%= entity.entityFileName %>.sagas'
import <%= entity.entityNameCapitalized %>Actions from '../../../../../app/modules/entities/<%= entity.entityFileName %>/<%= entity.entityFileName %>.reducer'

const { get<%= entity.entityNameCapitalized %>, getAll<%= entity.entityNamePlural %>, update<%= entity.entityNameCapitalized %>, delete<%= entity.entityNameCapitalized %><%= entity.searchEngine ? `, search${entity.entityNamePlural}` : '' %> } = <%= entity.entityNameCapitalized %>Sagas;
const stepper = (fn) => (mock) => fn.next(mock).value

test('get success path', () => {
  const response = FixtureAPI.get<%= entity.entityNameCapitalized %>(1)
  const step = stepper(get<%= entity.entityNameCapitalized %>(FixtureAPI, { <%= entity.entityInstance %>Id: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>Success(response.data)))
})

test('get failure path', () => {
  const response = { ok: false }
  const step = stepper(get<%= entity.entityNameCapitalized %>(FixtureAPI, { <%= entity.entityInstance %>Id: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>Failure()))
})

test('getAll success path', () => {
  const response = FixtureAPI.getAll<%= entity.entityNamePlural %>()
  const step = stepper(getAll<%= entity.entityNamePlural %>(FixtureAPI, { options: { page: 0, sort: 'id,asc', size: 20 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>AllSuccess([{ id: 1 }, { id: 2 }])))
})

test('getAll failure path', () => {
  const response = { ok: false }
  const step = stepper(getAll<%= entity.entityNamePlural %>(FixtureAPI, { options: { page: 0, sort: 'id,asc', size: 20 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>AllFailure()))
})

test('update success path', () => {
  const response = FixtureAPI.update<%= entity.entityNameCapitalized %>({ id: 1 })
  const step = stepper(update<%= entity.entityNameCapitalized %>(FixtureAPI, { <%= entity.entityInstance %>: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>UpdateSuccess(response.data)))
})

test('update failure path', () => {
  const response = { ok: false }
  const step = stepper(update<%= entity.entityNameCapitalized %>(FixtureAPI, { <%= entity.entityInstance %>: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>UpdateFailure()))
})

<%_ if (entity.searchEngineAny) { _%>
test('search success path', () => {
  const response = FixtureAPI.search<%= entity.entityNamePlural %>()
  const step = stepper(search<%= entity.entityNamePlural %>(FixtureAPI, '*'))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>SearchSuccess([{ id: 1 }, { id: 2 }])))
})

test('search failure path', () => {
  const response = { ok: false }
  const step = stepper(search<%= entity.entityNamePlural %>(FixtureAPI, '*'))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>SearchFailure()))
})
<%_ } _%>
test('delete success path', () => {
  const response = FixtureAPI.delete<%= entity.entityNameCapitalized %>({ id: 1 })
  const step = stepper(delete<%= entity.entityNameCapitalized %>(FixtureAPI, { <%= entity.entityInstance %>Id: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>DeleteSuccess(response.data)))
})

test('delete failure path', () => {
  const response = { ok: false }
  const step = stepper(delete<%= entity.entityNameCapitalized %>(FixtureAPI, { <%= entity.entityInstance %>Id: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= entity.entityNameCapitalized %>Actions.<%= entity.entityInstance %>DeleteFailure()))
})
